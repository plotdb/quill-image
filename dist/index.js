// Generated by LiveScript 1.6.0
var Embed, Delta, imagePlusBlot, resizer, ref$;
Embed = Quill['import']('blots/embed');
Delta = Quill['import']('delta');
imagePlusBlot = function(){
  return Reflect.construct(Embed, arguments, imagePlusBlot);
};
imagePlusBlot.prototype = Object.create(Embed.prototype);
imagePlusBlot.prototype.constructor = imagePlusBlot;
imagePlusBlot.prototype.format = function(n, v){
  if (n === 'width' || n === 'height') {
    if (v != null) {
      return this.domNode.setAttribute(n, v);
    } else {
      return this.domNode.removeAttribute(n);
    }
  } else {
    return Embed.call(this, n, v);
  }
};
Object.setPrototypeOf(imagePlusBlot, Embed);
resizer = function(){
  var moveHandler, this$ = this;
  this._ = {
    dom: {}
  };
  this._.dom.caret = document.createElement('div');
  this._.dom.caret.classList.add('quill-image-plus-resizer-caret');
  this._.dom.base = document.createElement('div');
  this._.dom.base.classList.add('quill-image-plus-resizer-root');
  import$(this._.dom, Object.fromEntries(['n', 'e', 's', 'w'].map(function(t){
    var n;
    n = document.createElement('div');
    this$._.dom.base.appendChild(n);
    n.classList.add('quill-image-plus-resizer-bar', "quill-image-plus-resizer-bar-" + (t === 'n' || t === 's' ? 'horizontal' : 'vertical'));
    return [t, n];
  })));
  import$(this._.dom, Object.fromEntries(['nw', 'ne', 'se', 'sw'].map(function(t){
    var n;
    n = document.createElement('div');
    this$._.dom.base.appendChild(n);
    n.classList.add('quill-image-plus-resizer-dot');
    return [t, n];
  })));
  moveHandler = function(evt){
    var n, blot, index, ref$, x, y, dir, dx, dy, w, h, width, height;
    evt.stopPropagation();
    if (!this$._.start || !evt.buttons) {
      window.removeEventListener('mousemove', moveHandler);
      window.removeEventListener('mouseup', moveHandler);
      document.body.classList.toggle('quill-image-plus-select-suppress', false);
      n = this$._.editor.container.querySelector("[key='" + this$._.key + "']");
      blot = Quill.find(n);
      index = this$._.editor.getIndex(blot);
      this$._.editor.formatText(index, 1, {
        width: (ref$ = this$._.previewPos).width,
        height: ref$.height
      });
      this$._.editor.updateContents({
        ops: [
          {
            retain: index
          }, {
            retain: 1,
            attributes: {
              width: (ref$ = this$._.previewPos).width,
              height: ref$.height
            }
          }
        ]
      });
      return this$.bind({
        node: n,
        key: this$._.key
      });
    }
    ref$ = [evt.clientX, evt.clientY, this$._.dir], x = ref$[0], y = ref$[1], dir = ref$[2];
    ref$ = [x - this$._.x, y - this$._.y], dx = ref$[0], dy = ref$[1];
    ref$ = [this$._.pos.width, this$._.pos.height], w = ref$[0], h = ref$[1];
    if (/n/.exec(dir)) {
      dy = -dy;
    }
    if (/w/.exec(dir)) {
      dx = -dx;
    }
    ref$ = Math.abs(dx) > Math.abs(dy)
      ? [dx, dx * h / w]
      : [dy * w / h, dy], dx = ref$[0], dy = ref$[1];
    ref$ = this$._.pos, x = ref$.x, y = ref$.y, width = ref$.width, height = ref$.height;
    if (/n/.exec(dir)) {
      ref$ = [this$._.pos.y - dy, this$._.pos.height + dy], y = ref$[0], height = ref$[1];
    }
    if (/s/.exec(dir)) {
      ref$ = [this$._.pos.y, this$._.pos.height + dy], y = ref$[0], height = ref$[1];
    }
    if (/w/.exec(dir)) {
      ref$ = [this$._.pos.x - dx, this$._.pos.width + dx], x = ref$[0], width = ref$[1];
    }
    if (/e/.exec(dir)) {
      ref$ = [this$._.pos.x, this$._.pos.width + dx], x = ref$[0], width = ref$[1];
    }
    return this$.repos({
      x: x,
      y: y,
      width: width,
      height: height,
      preview: true
    });
  };
  this._.dom.base.addEventListener('mousedown', function(evt){
    var dir, ref$;
    dir = ['nw', 'ne', 'se', 'sw', 'n', 's', 'w', 'e'].filter(function(t){
      return this$._.dom[t] === evt.target;
    })[0];
    if (!dir) {
      return;
    }
    this$._.start = true;
    ref$ = this$._;
    ref$.x = evt.clientX;
    ref$.y = evt.clientY;
    ref$.dir = dir;
    document.body.classList.toggle('quill-image-plus-select-suppress', true);
    window.addEventListener('mousemove', moveHandler);
    return window.addEventListener('mouseup', moveHandler);
  });
  return this;
};
resizer.prototype = (ref$ = Object.create(Object.prototype), ref$.dismissCaret = function(){
  if (this._.dom.caret.parentNode) {
    return this._.dom.caret.parentNode.removeChild(this._.dom.caret);
  }
}, ref$.caret = function(arg$){
  var node, evt, ref$, x, y, container, position, range, box, rbox;
  node = arg$.node, evt = arg$.evt;
  ref$ = [evt.clientX, evt.clientY], x = ref$[0], y = ref$[1];
  container = node.closest('.ql-container');
  if (!(position = document.caretPositionFromPoint(x, y))) {
    return;
  }
  if (this._.dom.caret.parentNode) {
    this._.dom.caret.parentNode.removeChild(this._.dom.caret);
  }
  container.appendChild(this._.dom.caret);
  range = document.createRange();
  range.setStart(position.offsetNode, position.offset);
  range.setEnd(position.offsetNode, position.offset);
  box = range.getBoundingClientRect();
  rbox = container.getBoundingClientRect();
  ref$ = [box.x - rbox.x, box.y - rbox.y], x = ref$[0], y = ref$[1];
  return ref$ = this._.dom.caret.style, ref$.left = x + "px", ref$.top = y + "px", ref$;
}, ref$.bind = function(arg$){
  var node, key, evt, container, quill, rbox, box, ref$, x, y, width, height;
  node = arg$.node, key = arg$.key, evt = arg$.evt;
  this._.key = key;
  if (evt) {
    container = evt.target.closest('.ql-container');
    this._.editor = quill = Quill.find(evt.target.closest('.ql-editor').parentElement);
  } else {
    quill = this._.editor;
    container = quill.container;
  }
  if (this._.dom.base.parentNode) {
    this._.dom.base.parentNode.removeChild(this._.dom.base);
  }
  container.appendChild(this._.dom.base);
  rbox = container.getBoundingClientRect();
  box = node.getBoundingClientRect();
  ref$ = [box.x - rbox.x, box.y - rbox.y, box.width, box.height], x = ref$[0], y = ref$[1], width = ref$[2], height = ref$[3];
  return this.repos({
    x: x,
    y: y,
    width: width,
    height: height
  });
}, ref$.repos = function(arg$){
  var x, y, width, height, preview, ref$, ref1$, this$ = this;
  x = arg$.x, y = arg$.y, width = arg$.width, height = arg$.height, preview = arg$.preview;
  if (!preview) {
    ref$ = (ref1$ = this._).pos || (ref1$.pos = {});
    ref$.x = x;
    ref$.y = y;
    ref$.width = width;
    ref$.height = height;
  } else {
    ref$ = (ref1$ = this._).previewPos || (ref1$.previewPos = {});
    ref$.x = x;
    ref$.y = y;
    ref$.width = width;
    ref$.height = height;
  }
  [['nw', x, y], ['ne', x + width - 8, y], ['se', x + width - 8, y + height - 8], ['sw', x, y + height - 8]].map(function(arg$){
    var t, x, y;
    t = arg$[0], x = arg$[1], y = arg$[2];
    return this$._.dom[t].style.transform = "translate(" + x + "px, " + y + "px)";
  });
  return [['n', x, y, width, 0], ['e', x + width - 3, y, 0, height], ['s', x, y + height - 3, width, 0], ['w', x, y, 0, height]].map(function(arg$){
    var t, x, y, width, height;
    t = arg$[0], x = arg$[1], y = arg$[2], width = arg$[3], height = arg$[4];
    this$._.dom[t].style.transform = "translate(" + x + "px, " + y + "px)";
    this$._.dom[t].style.width = (width || 3) + "px";
    return this$._.dom[t].style.height = (height || 3) + "px";
  });
}, ref$);
ref$ = import$(imagePlusBlot, Embed);
ref$.blotName = 'image-plus';
ref$.tagName = 'img';
ref$.create = function(v){
  var node, key;
  v == null && (v = {});
  if (!imagePlusBlot.resizer) {
    imagePlusBlot.resizer = new resizer();
  }
  node = Embed.create.call(this, v);
  node.setAttribute('src', v.src);
  node.setAttribute('alt', v.alt || '');
  node.setAttribute('key', key = v.key || Math.random().toString(36).substring(2));
  if (v.width) {
    node.setAttribute('width', v.width);
  }
  if (v.height) {
    node.setAttribute('height', v.height);
  }
  node.setAttribute('draggable', false);
  node.addEventListener('mousedown', function(evt){
    var moveHandler;
    imagePlusBlot.resizer.bind({
      node: node,
      key: key,
      evt: evt
    });
    moveHandler = function(evt){
      var position, quill, oldBlot, oldIndex, newBlot, newIndex, ref$, width, height, n, delta;
      if (evt.buttons) {
        return imagePlusBlot.resizer.caret({
          node: node,
          evt: evt
        });
      }
      window.removeEventListener('mousemove', moveHandler);
      window.removeEventListener('mouseup', moveHandler);
      if (!(position = document.caretPositionFromPoint(evt.clientX, evt.clientY))) {
        return;
      }
      quill = Quill.find(node.closest('.ql-editor').parentElement);
      oldBlot = Quill.find(node);
      oldIndex = quill.getIndex(oldBlot);
      newBlot = Quill.find(position.offsetNode, true);
      newIndex = quill.getIndex(newBlot) + position.offset;
      console.log(oldBlot, node, oldBlot.formats());
      ref$ = oldBlot.formats(), width = ref$.width, height = ref$.height;
      if (position.offsetNode instanceof Element) {
        if ((n = position.offsetNode.childNodes[position.offset]) === node) {
          return;
        }
      }
      if (newIndex > oldIndex) {
        newIndex -= 1;
      }
      if (Math.abs(newIndex - oldIndex) < 2) {
        return;
      }
      delta = new Delta().retain(oldIndex < newIndex ? oldIndex : newIndex);
      delta = oldIndex < newIndex
        ? delta['delete'](1)
        : delta.insert({
          'image-plus': (ref$ = {
            src: node.src,
            alt: node.alt,
            key: node.key,
            width: node.width,
            height: node.height
          }, ref$.transient = true, ref$)
        }, {
          width: width,
          height: height
        });
      delta = delta.retain(Math.abs(newIndex - oldIndex));
      delta = oldIndex > newIndex
        ? delta['delete'](1)
        : delta.insert({
          'image-plus': (ref$ = {
            src: node.src,
            alt: node.alt,
            key: node.key,
            width: node.width,
            height: node.height
          }, ref$.transient = true, ref$)
        }, {
          width: width,
          height: height
        });
      quill.updateContents(delta);
      return imagePlusBlot.resizer.dismissCaret();
    };
    window.addEventListener('mousemove', moveHandler);
    return window.addEventListener('mouseup', moveHandler);
  });
  if (v.transient) {
    node.onload = function(){
      return imagePlusBlot.resizer.bind({
        node: node,
        key: key
      });
    };
  }
  return node;
};
ref$.value = function(n){
  return ['src', 'alt', 'width', 'height', 'key'].map(function(t){
    return [t, n.getAttribute(t)];
  });
};
ref$.formats = function(node){
  var formats;
  return formats = Object.fromEntries(['width', 'height'].map(function(t){
    return [t, node.getAttribute(t) || ''];
  }));
};
Quill.register(imagePlusBlot);
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
