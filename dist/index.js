// Generated by LiveScript 1.6.0
var quillImageTools, ref$, this$ = this;
quillImageTools = function(quill, options){
  options == null && (options = {});
  this.quill = quill;
  this.root = quill.root;
  this.isActive = false;
  this.selectedImage = null;
  this.overlay = null;
  this.resizeHandles = {};
  this.dragState = null;
  this._opt = options;
  import$(this, options);
  this.init();
  return this;
};
quillImageTools.prototype = (ref$ = Object.create(Object.prototype), ref$.constructor = quillImageTools, ref$.init = function(){
  this.setupStyles();
  this.setupEvents();
  return this.registerModule();
}, ref$.setupStyles = function(){
  var style;
  if (document.querySelector('#quill-image-tools-styles')) {
    return;
  }
  style = document.createElement('style');
  style.id = 'quill-image-tools-styles';
  style.innerHTML = '.quill-image-overlay {\n    position: absolute;\n    border: 2px solid #0066cc;\n    pointer-events: none;\n    z-index: 1000;\n    box-sizing: border-box;\n}\n\n.quill-image-handle {\n    position: absolute;\n    width: 12px;\n    height: 12px;\n    background: #0066cc;\n    border: 2px solid white;\n    border-radius: 2px;\n    pointer-events: auto;\n    cursor: nw-resize;\n    box-sizing: border-box;\n}\n\n.quill-image-handle.se { \n    bottom: -6px; \n    right: -6px; \n    cursor: se-resize; \n}\n\n.quill-image-handle.sw { \n    bottom: -6px; \n    left: -6px; \n    cursor: sw-resize; \n}\n\n.quill-image-handle.ne { \n    top: -6px; \n    right: -6px; \n    cursor: ne-resize; \n}\n\n.quill-image-handle.nw { \n    top: -6px; \n    left: -6px; \n    cursor: nw-resize; \n}\n\n.quill-image-dragging {\n    opacity: 0.5;\n    pointer-events: none;\n}';
  return document.head.appendChild(style);
}, ref$.setupEvents = function(){
  var this$ = this;
  this.root.addEventListener('click', function(e){
    return this$.onEditorClick.apply(this$, [e]);
  });
  document.addEventListener('mousedown', function(e){
    return this$.onMouseDown.apply(this$, [e]);
  });
  document.addEventListener('mousemove', function(e){
    return this$.onMouseMove.apply(this$, [e]);
  });
  document.addEventListener('mouseup', function(e){
    return this$.onMouseUp.apply(this$, [e]);
  });
  return document.addEventListener('keydown', function(e){
    return this$.onKeydown.apply(this$, [e]);
  });
}, ref$.registerModule = function(){
  if (this.quill.register != null) {
    return this.quill.register('modules/imageTools', quillImageTools);
  }
}, ref$.onEditorClick = function(e){
  var target;
  target = e.target;
  if (target.tagName === 'IMG') {
    e.preventDefault();
    return this$.selectImage(target);
  } else {
    return this$.deselectImage();
  }
}, ref$.onKeydown = function(e){
  if (e.key === 'Escape') {
    return this$.deselectImage();
  }
}, ref$.onMouseDown = function(e){
  if (this$.overlay == null) {
    return;
  }
  if (e.target.classList.contains('quill-image-handle')) {
    e.preventDefault();
    return this$.startResize(e);
  } else if (e.target === this$.selectedImage) {
    e.preventDefault();
    return this$.startDrag(e);
  }
}, ref$.onMouseMove = function(e){
  var ref$, ref1$;
  if (((ref$ = this$.dragState) != null ? ref$.type : void 8) === 'resize') {
    return this$.handleResize(e);
  } else if (((ref1$ = this$.dragState) != null ? ref1$.type : void 8) === 'drag') {
    return this$.handleDrag(e);
  }
}, ref$.onMouseUp = function(e){
  if (this$.dragState != null) {
    return this$.finishDrag(e);
  }
}, ref$.selectImage = function(img){
  this.deselectImage();
  this.selectedImage = img;
  this.isActive = true;
  this.createOverlay();
  return this.positionOverlay();
}, ref$.deselectImage = function(){
  if (!this.isActive) {
    return;
  }
  this.isActive = false;
  this.selectedImage = null;
  return this.removeOverlay();
}, ref$.createOverlay = function(){
  var corners, i$, len$, corner, handle;
  if (this.selectedImage == null) {
    return;
  }
  this.overlay = document.createElement('div');
  this.overlay.className = 'quill-image-overlay';
  corners = ['nw', 'ne', 'sw', 'se'];
  for (i$ = 0, len$ = corners.length; i$ < len$; ++i$) {
    corner = corners[i$];
    handle = document.createElement('div');
    handle.className = "quill-image-handle " + corner;
    handle.dataset.corner = corner;
    this.overlay.appendChild(handle);
    this.resizeHandles[corner] = handle;
  }
  return document.body.appendChild(this.overlay);
}, ref$.removeOverlay = function(){
  if (this.overlay == null) {
    return;
  }
  this.overlay.remove();
  this.overlay = null;
  return this.resizeHandles = {};
}, ref$.positionOverlay = function(){
  var rect, ref$;
  if (!(this.overlay != null && this.selectedImage != null)) {
    return;
  }
  rect = this.selectedImage.getBoundingClientRect();
  return ref$ = this.overlay.style, ref$.left = rect.left + "px", ref$.top = rect.top + "px", ref$.width = rect.width + "px", ref$.height = rect.height + "px", ref$;
}, ref$.startResize = function(e){
  var corner, rect;
  corner = e.target.dataset.corner;
  rect = this.selectedImage.getBoundingClientRect();
  return this.dragState = {
    type: 'resize',
    corner: corner,
    startX: e.clientX,
    startY: e.clientY,
    startWidth: rect.width,
    startHeight: rect.height,
    aspectRatio: rect.width / rect.height
  };
}, ref$.handleResize = function(e){
  var ref$, ref1$, corner, startX, startY, startWidth, startHeight, aspectRatio, dx, dy, newWidth, newHeight;
  if (((ref$ = this.dragState) != null ? ref$.type : void 8) !== 'resize') {
    return;
  }
  ref1$ = this.dragState, corner = ref1$.corner, startX = ref1$.startX, startY = ref1$.startY, startWidth = ref1$.startWidth, startHeight = ref1$.startHeight, aspectRatio = ref1$.aspectRatio;
  dx = e.clientX - startX;
  dy = e.clientY - startY;
  newWidth = startWidth;
  newHeight = startHeight;
  switch (corner) {
  case 'se':
    newWidth = startWidth + dx;
    newHeight = newWidth / aspectRatio;
    break;
  case 'sw':
    newWidth = startWidth - dx;
    newHeight = newWidth / aspectRatio;
    break;
  case 'ne':
    newWidth = startWidth + dx;
    newHeight = newWidth / aspectRatio;
    break;
  case 'nw':
    newWidth = startWidth - dx;
    newHeight = newWidth / aspectRatio;
  }
  newWidth = Math.max(50, newWidth);
  newHeight = newWidth / aspectRatio;
  ref1$ = this.selectedImage.style;
  ref1$.width = newWidth + "px";
  ref1$.height = newHeight + "px";
  return this.positionOverlay();
}, ref$.startDrag = function(e){
  return this.dragState = {
    type: 'drag',
    startX: e.clientX,
    startY: e.clientY
  };
}, ref$.handleDrag = function(e){
  var ref$;
  if (((ref$ = this.dragState) != null ? ref$.type : void 8) !== 'drag') {
    return;
  }
}, ref$.finishDrag = function(e){
  if (this.dragState == null) {
    return;
  }
  if (this.dragState.type === 'resize') {
    this.finishResize();
  } else if (this.dragState.type === 'drag') {
    this.finishReorder();
  }
  return this.dragState = null;
}, ref$.finishResize = function(){
  var newWidth, newHeight, blot, index;
  if (this.selectedImage == null) {
    return;
  }
  newWidth = parseInt(this.selectedImage.style.width);
  newHeight = parseInt(this.selectedImage.style.height);
  blot = this.quill.scroll.find(this.selectedImage);
  if (blot == null) {
    return;
  }
  index = this.quill.getIndex(blot);
  this.quill.formatText(index, 1, {
    width: newWidth + "px",
    height: newHeight + "px"
  });
  return this.positionOverlay();
}, ref$.finishReorder = function(){
  return console.log('Drag reorder finished - not yet implemented');
}, ref$.destroy = function(){
  return this.deselectImage();
}, ref$);
if (typeof window != 'undefined' && window !== null) {
  window.quillImageTools = quillImageTools;
} else {
  module.exports = quillImageTools;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
